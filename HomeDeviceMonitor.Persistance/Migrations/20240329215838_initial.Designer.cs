// <auto-generated />
using System;
using HomeDeviceMonitor.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeDeviceMonitor.Persistance.Migrations
{
    [DbContext(typeof(HDMonitorDbContext))]
    [Migration("20240329215838_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingId = 1,
                            City = "Częstochowa",
                            Code = "42-280",
                            Country = "Polska",
                            Created = new DateTime(2024, 3, 29, 22, 58, 36, 653, DateTimeKind.Local).AddTicks(6734),
                            No = "81",
                            StatusId = 1,
                            Street = "Busolowa"
                        });
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 3, 29, 22, 58, 36, 653, DateTimeKind.Local).AddTicks(6505),
                            Name = "Dom test",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceDescription")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("ParentDeviceId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingId = 1,
                            Created = new DateTime(2024, 3, 29, 22, 58, 36, 653, DateTimeKind.Local).AddTicks(7134),
                            DeviceName = "PVmonitor",
                            DeviceType = "Real",
                            Frequency = 60,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 3, 29, 22, 58, 36, 653, DateTimeKind.Local).AddTicks(7348),
                            DeviceDescription = "Sofar KTL-X",
                            DeviceName = "sofar1",
                            DeviceType = "Virtual",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.MeasurementConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Thresholds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidRange")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 3, 29, 22, 58, 36, 653, DateTimeKind.Local).AddTicks(7380),
                            DeviceId = 2,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Address", b =>
                {
                    b.HasOne("HomeDeviceMonitor.Domain.Entities.Building", "Building")
                        .WithOne("Address")
                        .HasForeignKey("HomeDeviceMonitor.Domain.Entities.Address", "BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HomeDeviceMonitor.Domain.ValueObject.GeoCoordinate", "Location", b1 =>
                        {
                            b1.Property<int>("AddressId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("Longitude");

                            b1.HasKey("AddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");

                            b1.HasData(
                                new
                                {
                                    AddressId = 1,
                                    Latitude = 50.777651200000001,
                                    Longitude = 19.038317299999999
                                });
                        });

                    b.Navigation("Building");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Device", b =>
                {
                    b.HasOne("HomeDeviceMonitor.Domain.Entities.Building", "Building")
                        .WithMany("Devices")
                        .HasForeignKey("BuildingId");

                    b.HasOne("HomeDeviceMonitor.Domain.Entities.Device", "ParentDevice")
                        .WithMany("Devices")
                        .HasForeignKey("ParentDeviceId");

                    b.OwnsOne("HomeDeviceMonitor.Domain.ValueObject.Url", "Url", b1 =>
                        {
                            b1.Property<int>("DeviceId")
                                .HasColumnType("int");

                            b1.Property<string>("Host")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Host");

                            b1.Property<string>("Ip")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Ip");

                            b1.Property<string>("Parameter")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Parameter");

                            b1.Property<string>("Path")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Path");

                            b1.Property<string>("Port")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Port");

                            b1.Property<string>("Protocol")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Protocol");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");

                            b1.HasData(
                                new
                                {
                                    DeviceId = 1,
                                    Ip = "31.42.6.141",
                                    Path = "public",
                                    Port = "14180",
                                    Protocol = "http"
                                });
                        });

                    b.Navigation("Building");

                    b.Navigation("ParentDevice");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.MeasurementConfiguration", b =>
                {
                    b.HasOne("HomeDeviceMonitor.Domain.Entities.Device", "Device")
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Building", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("HomeDeviceMonitor.Domain.Entities.Device", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
